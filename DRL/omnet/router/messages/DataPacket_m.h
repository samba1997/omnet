//
// Generated file, do not edit! Created by nedtool 4.6 from messages/DataPacket.msg.
//

#ifndef _DATAPACKET_M_H_
#define _DATAPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>messages/DataPacket.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet DataPacket
 * {
 *     int srcNode;
 *     int dstNode;
 * 
 *     int ttl;
 *     int lastRouter;
 *     int l2;
 *     int l3;
 *     int l4;
 * 
 *     int lastQueue;
 *     int q2;
 *     int q3;
 *     int q4;
 *     int q5;
 * 
 *     double lastTS;
 *     double t2;
 *     double t3;
 *     double t4;
 *     double t5;
 * 
 *     int routing;
 * }
 * </pre>
 */
class DataPacket : public ::cPacket
{
  protected:
    int srcNode_var;
    int dstNode_var;
    int ttl_var;
    int lastRouter_var;
    int l2_var;
    int l3_var;
    int l4_var;
    int lastQueue_var;
    int q2_var;
    int q3_var;
    int q4_var;
    int q5_var;
    double lastTS_var;
    double t2_var;
    double t3_var;
    double t4_var;
    double t5_var;
    int routing_var;

  private:
    void copy(const DataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataPacket&);

  public:
    DataPacket(const char *name=NULL, int kind=0);
    DataPacket(const DataPacket& other);
    virtual ~DataPacket();
    DataPacket& operator=(const DataPacket& other);
    virtual DataPacket *dup() const {return new DataPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSrcNode() const;
    virtual void setSrcNode(int srcNode);
    virtual int getDstNode() const;
    virtual void setDstNode(int dstNode);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual int getLastRouter() const;
    virtual void setLastRouter(int lastRouter);
    virtual int getL2() const;
    virtual void setL2(int l2);
    virtual int getL3() const;
    virtual void setL3(int l3);
    virtual int getL4() const;
    virtual void setL4(int l4);
    virtual int getLastQueue() const;
    virtual void setLastQueue(int lastQueue);
    virtual int getQ2() const;
    virtual void setQ2(int q2);
    virtual int getQ3() const;
    virtual void setQ3(int q3);
    virtual int getQ4() const;
    virtual void setQ4(int q4);
    virtual int getQ5() const;
    virtual void setQ5(int q5);
    virtual double getLastTS() const;
    virtual void setLastTS(double lastTS);
    virtual double getT2() const;
    virtual void setT2(double t2);
    virtual double getT3() const;
    virtual void setT3(double t3);
    virtual double getT4() const;
    virtual void setT4(double t4);
    virtual double getT5() const;
    virtual void setT5(double t5);
    virtual int getRouting() const;
    virtual void setRouting(int routing);
};

inline void doPacking(cCommBuffer *b, DataPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DATAPACKET_M_H_

